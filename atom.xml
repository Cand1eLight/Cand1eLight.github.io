<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>祝炩烟&#39;s Blog</title>
  
  <subtitle>会当身由己，婉转入江湖</subtitle>
  <link href="https://cand1elight.github.io/atom.xml" rel="self"/>
  
  <link href="https://cand1elight.github.io/"/>
  <updated>2025-03-03T11:23:40.530Z</updated>
  <id>https://cand1elight.github.io/</id>
  
  <author>
    <name>祝炩烟</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>第一周复盘 | 心如果被吸引，手上的剑就挥不出</title>
    <link href="https://cand1elight.github.io/posts/b1980b8a.html"/>
    <id>https://cand1elight.github.io/posts/b1980b8a.html</id>
    <published>2025-03-03T10:04:43.000Z</published>
    <updated>2025-03-03T11:23:40.530Z</updated>
    
    <content type="html"><![CDATA[<h1 id="📚-第一周复盘-心如果被吸引，手上的剑就挥不出"><a href="#📚-第一周复盘-心如果被吸引，手上的剑就挥不出" class="headerlink" title="📚 第一周复盘 | 心如果被吸引，手上的剑就挥不出"></a>📚 第一周复盘 | 心如果被吸引，手上的剑就挥不出</h1><p><img src="https://204180371.xyz/PicGo/b02e629a3e74d0c1b618d1d292e6d780_720.jpeg" alt="学习封面"><br><em><center>🕰️ 2025-01-30 | 📌 标签：#考研 #复盘 #时间管理</center></em></p><hr><h2 id="📌-本周进展"><a href="#📌-本周进展" class="headerlink" title="📌 本周进展"></a>📌 本周进展</h2><h3 id="📐-高等数学"><a href="#📐-高等数学" class="headerlink" title="📐 高等数学"></a>📐 高等数学</h3><ul><li>✅ 完成第九章内容汇总</li><li>📖 武忠祥教材 &amp; 张宇讲义双线推进</li><li>🚩 下周重点：积分大题突破（武忠祥基础题未覆盖部分）</li></ul><h3 id="📖-英语攻坚"><a href="#📖-英语攻坚" class="headerlink" title="📖 英语攻坚"></a>📖 英语攻坚</h3><ul><li>🧠 每日20新词 + 滚动复习</li><li>🚶♂️ 碎片化学习：通勤/就餐背单词</li><li>📘《句句真研》进度：4天35页 → 周目标60页（三月完结全书）</li></ul><h3 id="💻-数据结构（408）"><a href="#💻-数据结构（408）" class="headerlink" title="💻 数据结构（408）"></a>💻 数据结构（408）</h3><ul><li>🎯 当前进度：50%核心内容</li><li>📅 二轮计划：重点突破大题</li><li>🔥 目标：3月中旬完成一轮小题复习</li></ul><hr><h2 id="🏆-蓝桥杯备战"><a href="#🏆-蓝桥杯备战" class="headerlink" title="🏆 蓝桥杯备战"></a>🏆 蓝桥杯备战</h2><ul><li>⚙️ 启动系统性刷题</li><li>🕒 剩余时间：30天</li><li>💡 策略：保持每日高强度训练</li></ul><hr><h2 id="🔧-项目进展"><a href="#🔧-项目进展" class="headerlink" title="🔧 项目进展"></a>🔧 项目进展</h2><ul><li>✅ 上交项目阶段暂时告一段落</li><li>张老师还是很开明的，希望最后考研能取得一个好的成果，最后也能和张老师学更多东西。</li></ul><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>结语的话就用刷到的抖音里面的演讲的一句话结束吧，割麦子之所以割的快，是因为弯腰从不直起来，一直弯着腰割着稻草，自然就会很快，有一次直起来，就会有无数次直起来，所以，把腰一直弯下去吧，当把腰直起来的时候，就回不去了。</p><h2 id="💭-本周思考"><a href="#💭-本周思考" class="headerlink" title="💭 本周思考"></a>💭 本周思考</h2><blockquote><p>🌾 <strong>割麦哲学</strong><br>“弯腰的节奏决定收割速度，<br>直腰的诱惑如同复习时的分心，<br>一次妥协就会形成惯性。<br>真正的专注是把调试状态成本归零。”</p></blockquote><center>✨ 保持弓弦满月的状态，直到箭矢破空而出 ✨</center>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;📚-第一周复盘-心如果被吸引，手上的剑就挥不出&quot;&gt;&lt;a href=&quot;#📚-第一周复盘-心如果被吸引，手上的剑就挥不出&quot; class=&quot;headerlink&quot; title=&quot;📚 第一周复盘 | 心如果被吸引，手上的剑就挥不出&quot;&gt;&lt;/a&gt;📚 第一周复盘 | 心</summary>
      
    
    
    
    
    <category term="考研" scheme="https://cand1elight.github.io/tags/%E8%80%83%E7%A0%94/"/>
    
    <category term="复盘" scheme="https://cand1elight.github.io/tags/%E5%A4%8D%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>Acwing 字符串章末数题总结</title>
    <link href="https://cand1elight.github.io/posts/56b22553.html"/>
    <id>https://cand1elight.github.io/posts/56b22553.html</id>
    <published>2025-01-31T15:38:34.000Z</published>
    <updated>2025-03-03T11:23:50.932Z</updated>
    
    <content type="html"><![CDATA[<h2 id="📝-题目-1：字符串的最小乘方单位"><a href="#📝-题目-1：字符串的最小乘方单位" class="headerlink" title="📝 题目 1：字符串的最小乘方单位"></a>📝 题目 1：字符串的最小乘方单位</h2><h3 id="📌-题目解析"><a href="#📌-题目解析" class="headerlink" title="📌 题目解析"></a>📌 题目解析</h3><p>上述代码用于求解 <strong>字符串的乘方</strong>，计算字符串的 <strong>最小乘方单位</strong>，即判断字符串是否由某个子串重复若干次构成，并找出最大的重复次数。</p><h3 id="💡-代码实现"><a href="#💡-代码实现" class="headerlink" title="💡 代码实现"></a>💡 代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string a;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; a &amp;&amp; a != <span class="string">&quot;.&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> len = a.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n = len;n;n--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(len % n == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> m = len / n;</span><br><span class="line">                string s = a.<span class="built_in">substr</span>(<span class="number">0</span>,m);</span><br><span class="line">                string str;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++) </span><br><span class="line">                    str += s;</span><br><span class="line">                <span class="keyword">if</span>(str == a)</span><br><span class="line">                &#123;</span><br><span class="line">                    cout &lt;&lt; n &lt;&lt; endl;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="🔍-代码思路"><a href="#🔍-代码思路" class="headerlink" title="🔍 代码思路"></a>🔍 代码思路</h3><ol><li><strong>循环读取输入字符串</strong>，直到输入的字符串为 <code>&quot;.&quot;</code> 结束。</li><li><strong>获取字符串长度 <code>len</code></strong>，然后从 <code>len</code> 开始倒序遍历，找到最大的 <code>n</code>，使得 <code>len</code> 能被 <code>n</code> 整除。</li><li><strong>计算 <code>m = len / n</code></strong>，即每个重复单元的长度（从 <code>1</code> 开始，逐步增加）。</li><li><strong>提取字符串的前 <code>m</code> 个字符</strong> 作为重复单元 <code>s</code>。</li><li><strong>构造新字符串 <code>str</code></strong>，用 <code>s</code> <strong>重复 <code>n</code> 次</strong> 进行匹配。</li><li><strong>判断 <code>str</code> 是否等于 <code>a</code></strong>，如果相等，则 <code>n</code> 即为最大周期，输出 <code>n</code> 并终止循环。</li><li><strong>遍历方式</strong>：<ul><li><strong>外层循环</strong> 负责找 <code>n</code>，从最大可能的周期开始，保证找到的是<strong>最大的 <code>n</code></strong>。</li><li><strong>内层循环</strong> 负责构造 <code>str</code>，确保 <code>str</code> 是否与 <code>a</code> 一致。</li></ul></li></ol><h3 id="🚀-示例测试"><a href="#🚀-示例测试" class="headerlink" title="🚀 示例测试"></a>🚀 示例测试</h3><div class="table-container"><table><thead><tr><th>输入</th><th>输出</th></tr></thead><tbody><tr><td><code>abab</code></td><td><code>2</code></td></tr><tr><td><code>aaaa</code></td><td><code>4</code></td></tr><tr><td><code>abcabcabc</code></td><td><code>3</code></td></tr></tbody></table></div><h3 id="✨-代码优化"><a href="#✨-代码优化" class="headerlink" title="✨ 代码优化"></a>✨ 代码优化</h3><ul><li><strong>从 <code>len</code> 开始遍历 <code>n</code></strong>，保证找到<strong>最大的 <code>n</code></strong>。</li><li><strong>整除判断优化</strong>，只对 <code>len</code> 可被 <code>n</code> 整除的 <code>n</code> 进行检测，减少无效计算。</li><li><strong>更高效方案</strong>（如 <code>KMP</code>），可用 <code>next</code> 数组快速找到最小循环单位。</li></ul><hr><h2 id="📝-题目-2：求解字符串之间的最大距离"><a href="#📝-题目-2：求解字符串之间的最大距离" class="headerlink" title="📝 题目 2：求解字符串之间的最大距离"></a>📝 题目 2：求解字符串之间的最大距离</h2><h3 id="📌-题目解析-1"><a href="#📌-题目解析-1" class="headerlink" title="📌 题目解析"></a>📌 题目解析</h3><p>本题的目标是 <strong>求解两个子串 <code>s1</code> 和 <code>s2</code> 在 <code>s</code> 中出现的最远间隔</strong>，即 <code>s1</code> 在 <code>s</code> 中的最早出现位置 <code>l</code>，<code>s2</code> 在 <code>s</code> 中的最晚出现位置 <code>r</code>，求 <code>r - l - 1</code>。</p><h3 id="💡-代码实现-1"><a href="#💡-代码实现-1" class="headerlink" title="💡 代码实现"></a>💡 代码实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">    string s, s1, s2;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取字符串</span></span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; c, c != <span class="string">&#x27;,&#x27;</span>) s += c;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; c, c != <span class="string">&#x27;,&#x27;</span>) s1 += c;</span><br><span class="line">    <span class="built_in">getline</span>(cin, s2);  <span class="comment">// ✅ 解决终端卡住的问题</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果 s 的长度小于 s1 或 s2，直接返回 -1</span></span><br><span class="line">    <span class="keyword">if</span> (s.<span class="built_in">size</span>() &lt; s<span class="number">1.</span><span class="built_in">size</span>() || s.<span class="built_in">size</span>() &lt; s<span class="number">2.</span><span class="built_in">size</span>())</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 找到 s1 在 s 中的起始位置</span></span><br><span class="line">        <span class="keyword">while</span> (l + s<span class="number">1.</span><span class="built_in">size</span>() &lt;= s.<span class="built_in">size</span>()) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (k &lt; s<span class="number">1.</span><span class="built_in">size</span>()) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (s[k + l] != s1[k])  <span class="comment">// ✅ 修正索引</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                k++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (k == s<span class="number">1.</span><span class="built_in">size</span>())  <span class="comment">// 如果匹配完整 s1</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            l++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> r = s.<span class="built_in">size</span>() - s<span class="number">2.</span><span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">// 找到 s2 在 s 中的末尾匹配位置</span></span><br><span class="line">        <span class="keyword">while</span> (r &gt;= <span class="number">0</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (k &lt; s<span class="number">2.</span><span class="built_in">size</span>()) </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (s[r + k] != s2[k]) <span class="comment">// ✅ 修正索引</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                k++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (k == s<span class="number">2.</span><span class="built_in">size</span>())  <span class="comment">// 如果匹配完整 s2</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            r--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        l += s<span class="number">1.</span><span class="built_in">size</span>() - <span class="number">1</span>;  <span class="comment">// 调整 l 位置</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算中间间隔</span></span><br><span class="line">        <span class="keyword">if</span> (l &gt;= r)</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, r - l - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="🔍-代码思路-1"><a href="#🔍-代码思路-1" class="headerlink" title="🔍 代码思路"></a>🔍 代码思路</h3><ol><li><strong>读取字符串 <code>s</code></strong>，子串 <code>s1</code> 和 <code>s2</code>。</li><li><strong>边界条件判断</strong>：<ul><li>如果 <code>s</code> 的长度 <strong>小于 <code>s1</code> 或 <code>s2</code></strong>，直接输出 <code>-1</code>。</li></ul></li><li><strong>寻找 <code>s1</code> 在 <code>s</code> 中的起始位置 <code>l</code></strong>：<ul><li>从 <code>0</code> 开始遍历 <code>s</code>，找到 <code>s1</code> <strong>首次匹配的位置</strong>。</li><li>通过 <code>while</code> 循环和 <code>k</code> 变量 <strong>检测子串是否匹配</strong>。</li></ul></li><li><strong>寻找 <code>s2</code> 在 <code>s</code> 中的末尾位置 <code>r</code></strong>：<ul><li>从 <code>s.size() - s2.size()</code> 开始倒序遍历 <code>s</code>，找到 <code>s2</code> <strong>最后一次出现的位置</strong>。</li></ul></li><li><strong>计算最终距离</strong>：<ul><li>由于 <code>l</code> 记录的是 <code>s1</code> 的 <strong>起始位置</strong>，因此 <code>l += s1.size() - 1</code> 进行调整。</li><li>计算 <code>r - l - 1</code>，如果 <code>l &gt;= r</code>，说明 <code>s1</code> 在 <code>s2</code> 之后或二者重叠，输出 <code>-1</code>，否则输出 <strong>最大距离</strong>。</li></ul></li></ol><h3 id="🚀-示例测试-1"><a href="#🚀-示例测试-1" class="headerlink" title="🚀 示例测试"></a>🚀 示例测试</h3><div class="table-container"><table><thead><tr><th>输入</th><th>输出</th></tr></thead><tbody><tr><td><code>abcde,bc,d</code></td><td><code>1</code></td></tr><tr><td><code>helloworld,hello,world</code></td><td><code>0</code></td></tr><tr><td><code>abcabcabc,abc,c</code></td><td><code>4</code></td></tr><tr><td><code>abc,abcd,xyz</code></td><td><code>-1</code></td></tr></tbody></table></div><h3 id="✨-代码优化-1"><a href="#✨-代码优化-1" class="headerlink" title="✨ 代码优化"></a>✨ 代码优化</h3><ul><li><strong>提前判断 <code>s1</code> 和 <code>s2</code> 是否可能存在</strong>，减少计算量。</li><li><strong>双指针优化</strong>，可以在 <code>O(n)</code> 复杂度下找到 <code>s1</code> 和 <code>s2</code> 的最远距离，提升效率。</li></ul><hr><h2 id="🔗-结语"><a href="#🔗-结语" class="headerlink" title="🔗 结语"></a>🔗 结语</h2><p>这两道题目都是<strong>AcWing 字符串题目</strong>中的经典案例：</p><ul><li><strong>第一题</strong> 主要考察 <strong>字符串的周期性</strong>，涉及 <strong>字符串匹配、周期检测</strong> 等内容。</li><li><strong>第二题</strong> 主要考察 <strong>字符串子串匹配和间距计算</strong>，需要熟练掌握 <strong>字符串遍历和索引管理</strong>。</li></ul><h2 id="Acwing题目索引号：777、778"><a href="#Acwing题目索引号：777、778" class="headerlink" title="Acwing题目索引号：777、778"></a>Acwing题目索引号：777、778</h2><p>📌 <strong>如果觉得这篇总结有帮助，记得收藏 &amp; 分享！😊</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;📝-题目-1：字符串的最小乘方单位&quot;&gt;&lt;a href=&quot;#📝-题目-1：字符串的最小乘方单位&quot; class=&quot;headerlink&quot; title=&quot;📝 题目 1：字符串的最小乘方单位&quot;&gt;&lt;/a&gt;📝 题目 1：字符串的最小乘方单位&lt;/h2&gt;&lt;h3 id=&quot;�</summary>
      
    
    
    
    
    <category term="算法" scheme="https://cand1elight.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="字符串" scheme="https://cand1elight.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>随机封面测试</title>
    <link href="https://cand1elight.github.io/posts/bf5247c3.html"/>
    <id>https://cand1elight.github.io/posts/bf5247c3.html</id>
    <published>2025-01-30T13:32:40.000Z</published>
    <updated>2025-01-30T14:24:46.895Z</updated>
    
    <content type="html"><![CDATA[<p>诶多……☆是♡同♡类♡呢♡喵♪（由乃逆光捧脸.jpg）那群八嘎是不会懂的呀……关于「二次元の美好」♡呐，如果说吾の存在有意义的话、那一定是因为「二·次·元」吧☆？所以呢——妄图污染这份「爱」的人类、都会被吾「抹」「杀」「掉」喔♪（小声）嘛……讨厌二次元的八嘎三次元最恶心了啊魂淡！★</p><p>呐、二次元の民那……都·是·最·最·善·良·の·存·在·呐☆多洗忒……要「嘲笑」这样的孩子呢？吾辈不明白啊——？嘛……说到底，你们都只是污秽の「来自三次元的大人」吧？大人什么的、最·讨·厌·了★♪</p><p>啊嘞啊嘞QAQ？多洗忒……欧尼酱ww？呐、桥豆麻袋……已经「厌烦」吾辈了嘛？哼唧……真是「冷·酷·の·人」呢QuQ——☆(๑°⌓°๑)嘛……即便是这样的哇达西，一定也是有「存·在·の·意·义」的吧、内~★快来「肯定」啊？不然呀……咱可就要「黑化」了哦♪呐？#(太开心)</p><p>呐。。。（伸出的小手又迅速垂下去）嗦嘎（表情有点失落），米娜桑已经不喜欢了呀（紧咬嘴唇），得磨，米娜桑忘了当初吗（握紧小手），莫以得丝（强忍住眼泪），已经大丈夫了呦（挤出笑脸），瓦大喜瓦，滋多滋多，滋多滋多（语气越来越用力了）滋多戴斯给！！！一滋嘛叠磨瓦撕裂嘛赛！！！至死都不会瓦斯裂嘛斯（认真的表情）</p><p>诶多……看起来阁下对于「二·次·元」の理解、似·乎·满·是·谬·误·哦☆~！嘛，连最为基本の「礼♪义♪廉♪耻♪」都早已失去了啊……♪（笑）呐，我说啊——这样のkimino、也会有自称「二♡次♡元」の资格吗★？fufufu——说到底、阁下已经「二·次·元·失·格」了吧？呐~♪#(太开心)</p><p>唔噗噗~汝等「劣·等·生·物」……也配去「妄想」吗？呐、「真正的二次元」什么的— —吾辈看汝是一点都不懂啊☆ （笑）嘛嘛嘛……不过看着汝试图伪装成「二次元」の可笑姿态，倒是让吾辈对于「三·次·元·的·白·痴」稍微有了些许兴趣哦？★【图片】诶多……☆是♡同♡类♡呢♡喵♪（由乃逆光捧脸.jpg）那群八嘎是不会懂的呀……关于「二次元の美好」♡呐，如果说吾の存在有意义的话、那一定是因为「二·次·元」吧☆？所以呢——妄图污染这份「爱」的人类、都会被吾「抹」「杀」「掉」喔♪（小声）嘛……讨厌二次元的八嘎三次元最恶心了啊魂淡！★</p><p>呐、二次元の民那……都·是·最·最·善·良·の·存·在·呐☆多洗忒……要「嘲笑」这样的孩子呢？吾辈不明白啊——？嘛……说到底，你们都只是污秽の「来自三次元的大人」吧？大人什么的、最·讨·厌·了★♪</p><p>啊嘞啊嘞QAQ？多洗忒……欧尼酱ww？呐、桥豆麻袋……已经「厌烦」吾辈了嘛？哼唧……真是「冷·酷·の·人」呢QuQ——☆(๑°⌓°๑)嘛……即便是这样的哇达西，一定也是有「存·在·の·意·义」的吧、内~★快来「肯定」啊？不然呀……咱可就要「黑化」了哦♪呐？</p><p>呐。。。（伸出的小手又迅速垂下去）嗦嘎（表情有点失落），米娜桑已经不喜欢了呀（紧咬嘴唇），得磨，米娜桑忘了当初吗（握紧小手），莫以得丝（强忍住眼泪），已经大丈夫了呦（挤出笑脸），瓦大喜瓦，滋多滋多，滋多滋多（语气越来越用力了）滋多戴斯给！！！一滋嘛叠磨瓦撕裂嘛赛！！！至死都不会瓦斯裂嘛斯（认真的表情）</p><p>诶多……看起来阁下对于「二·次·元」の理解、似·乎·满·是·谬·误·哦☆~！嘛，连最为基本の「礼♪义♪廉♪耻♪」都早已失去了啊……♪（笑）呐，我说啊——这样のkimino、也会有自称「二♡次♡元」の资格吗★？fufufu——说到底、阁下已经「二·次·元·失·格」了吧？呐~♪</p><p>唔噗噗~汝等「劣·等·生·物」……也配去「妄想」吗？呐、「真正的二次元」什么的— —吾辈看汝是一点都不懂啊☆ （笑）嘛嘛嘛……不过看着汝试图伪装成「二次元」の可笑姿态，倒是让吾辈对于「三·次·元·的·白·痴」稍微有了些许兴趣哦？★【图片】诶多……☆是♡同♡类♡呢♡喵♪（由乃逆光捧脸.jpg）那群八嘎是不会懂的呀……关于「二次元の美好」♡呐，如果说吾の存在有意义的话、那一定是因为「二·次·元」吧☆？所以呢——妄图污染这份「爱」的人类、都会被吾「抹」「杀」「掉」喔♪（小声）嘛……讨厌二次元的八嘎三次元最恶心了啊魂淡！★</p><p>呐、二次元の民那……都·是·最·最·善·良·の·存·在·呐☆多洗忒……要「嘲笑」这样的孩子呢？吾辈不明白啊——？嘛……说到底，你们都只是污秽の「来自三次元的大人」吧？大人什么的、最·讨·厌·了★♪</p><p>啊嘞啊嘞QAQ？多洗忒……欧尼酱ww？呐、桥豆麻袋……已经「厌烦」吾辈了嘛？哼唧……真是「冷·酷·の·人」呢QuQ——☆(๑°⌓°๑)嘛……即便是这样的哇达西，一定也是有「存·在·の·意·义」的吧、内~★快来「肯定」啊？不然呀……咱可就要「黑化」了哦♪呐？#(太开心)</p><p>吶吶吶，米娜桑，扣祢起哇，瓦込西二刺猿の焼酒嚏!あああ，辻我仞一-起守択，最好の二刺猿肥!吶吶，不憧我的，愚蠢の人炎們呵，果畔那塞，我二刺猿の焼酒是不会和祢有共同語言的jio豆麻袋,込祥子垪活有什幺錯喝?吶,告泝我呵。搜嚆,祢仞已経不喜炊了呵..真是冷酷の人昵,果鮮納塞,止祢看到不愉快のな西了。像我送祥的人,果然消失就好了昵。也午只有在二次元的世界里,オ有真正的美好存在的肥,吶?ねぇねぇねぇ，果然灰悪了呵，帯jio不，瓦込西，二刺猿の焼酒!博古哇zeidei不会人輸!米娜桑!吶!瓦込西二刺猿ぁぁ!哦晦吻扣賽伊弓斯!吶吶吶!米娜桑!我要幵劫了~一キ打去咢死!诶多诶多~「多洗忒」?为什么要「妄.图.抹.杀」这样的「自己」呢?★(笑)呐、「中二病的你」也好、「二次元的你」也好….「全部」daisuki~呐~二次元民那赛高desuwa!今后也.请.多.多.指.教.喔?~啊啊……是♡鲜♡血♡の♡味♡道♡呐♡~！（眯眼笑）kukuku——汝の「血」、会是什么样的「气味」呢☆？诶多多~说着说着有些期待了呢♪品尝「挚·爱·之·人」の「鲜血」什么的~嘛……如果是「你」的话，一定可以的!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;诶多……☆是♡同♡类♡呢♡喵♪（由乃逆光捧脸.jpg）那群八嘎是不会懂的呀……关于「二次元の美好」♡呐，如果说吾の存在有意义的话、那一定是因为「二·次·元」吧☆？所以呢——妄图污染这份「爱」的人类、都会被吾「抹」「杀」「掉」喔♪（小声）嘛……讨厌二次元的八嘎三次元最恶心了啊</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://cand1elight.github.io/posts/4a17b156.html"/>
    <id>https://cand1elight.github.io/posts/4a17b156.html</id>
    <published>2025-01-27T11:52:55.447Z</published>
    <updated>2025-01-27T12:20:12.891Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
